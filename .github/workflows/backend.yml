name: CI + Deploy Backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ci-backend-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-test:
    name: Build & Test (Maven, Java 17)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Make mvnw executable (if present)
        run: |
          if [ -f ./mvnw ]; then chmod +x mvnw; fi

      - name: Verify Java Format (Spotless)
        run: |
          if [ -f ./mvnw ]; then ./mvnw -B -ntp spotless:check; else mvn -B -ntp spotless:check; fi

      - name: Run tests
        run: |
          if [ -f ./mvnw ]; then ./mvnw -B -ntp test; else mvn -B -ntp test; fi

      - name: Package (no skip tests)
        run: |
          if [ -f ./mvnw ]; then ./mvnw -B -ntp -DskipTests=false package; else mvn -B -ntp -DskipTests=false package; fi

      - name: Upload JAR artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: |
            **/target/*.jar
          if-no-files-found: error

  deploy:
    name: Deploy to EC2 (SSH + systemd)
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      SERVICE_NAME: ${{ secrets.EC2_SERVICE_NAME }}
      DEPLOY_DIR: ${{ secrets.DEPLOY_DIR || '/opt/cocinadelicia/backend' }}
      RELEASES_DIR: ${{ secrets.DEPLOY_DIR || '/opt/cocinadelicia/backend' }}/releases

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifact

      - name: Find JAR path
        id: jar
        run: |
          JAR_PATH=$(ls -1 artifact/**/*.jar | head -n1)
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "Will deploy: $JAR_PATH"

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Create releases dir (remote)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "sudo mkdir -p $RELEASES_DIR && sudo chown -R app:app $(dirname $DEPLOY_DIR)"

      - name: Debug permissions (remote)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            set -euxo pipefail; \
            ls -ld ${DEPLOY_DIR} ${RELEASES_DIR} || true; \
            id || true \
          "

      - name: Upload JAR to /tmp
        id: upload
        run: |
          set -euxo pipefail
          RELEASE_NAME="app-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}.jar"
          scp -i ~/.ssh/id_rsa "${{ steps.jar.outputs.jar_path }}" "${EC2_USER}@${EC2_HOST}:/tmp/${RELEASE_NAME}"
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT

      - name: Move to releases with sudo and fix ownership
        run: |
          set -euxo pipefail
          RELEASE_NAME="${{ steps.upload.outputs.release_name }}"
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            sudo mkdir -p ${RELEASES_DIR} && \
            sudo install -o app -g app -m 0644 /tmp/${RELEASE_NAME} ${RELEASES_DIR}/${RELEASE_NAME} && \
            sudo rm -f /tmp/${RELEASE_NAME} && \
            sudo ls -l ${RELEASES_DIR}/${RELEASE_NAME} \
          "

      - name: Promote release (symlink -> current.jar) + verify
        run: |
          set -euxo pipefail
          RELEASE_NAME="${{ steps.upload.outputs.release_name }}"
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            set -euxo pipefail; \
            sudo ln -sfn ${RELEASES_DIR}/${RELEASE_NAME} ${DEPLOY_DIR}/current.jar; \
            sudo chown -h app:app ${DEPLOY_DIR}/current.jar; \
            ls -l ${DEPLOY_DIR}/current.jar; \
            # verificar que el target existe y es legible
            TARGET=\$(readlink -f ${DEPLOY_DIR}/current.jar); \
            echo TARGET=\$TARGET; \
            [ -f \"\$TARGET\" ] || { echo '❌ symlink apunta a un archivo inexistente'; exit 1; }; \
            sudo -u app test -r \"\$TARGET\" || { echo '❌ app no puede leer el jar'; ls -l \"\$TARGET\"; exit 1; } \
          "

      - name: Show systemd unit (debug)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            sudo systemctl cat ${SERVICE_NAME} || true \
          "


      - name: Restart service (wait until active)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            set -euxo pipefail; \
            sudo systemctl daemon-reload; \
            sudo systemctl restart ${SERVICE_NAME}; \
            # esperamos hasta 60s a que quede 'active'
            for i in {1..12}; do
              STATE=\$(systemctl is-active ${SERVICE_NAME} || true)
              echo \"state=\$STATE\"
              if [ \"\$STATE\" = \"active\" ]; then
                echo 'Service is active ✅'; exit 0
              elif [ \"\$STATE\" = \"failed\" ]; then
                echo 'Service failed ❌'; \
                sudo systemctl status ${SERVICE_NAME} --no-pager || true; \
                sudo journalctl -u ${SERVICE_NAME} -n 200 --no-pager || true; \
                exit 1
              fi
              sleep 5
            done
            echo 'Service stuck in activating ⏳'; \
            sudo systemctl status ${SERVICE_NAME} --no-pager || true; \
            sudo journalctl -u ${SERVICE_NAME} -n 200 --no-pager || true; \
            exit 1
          "
      - name: Health check (remote, via SSH)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            set -euxo pipefail; \
            for i in {1..12}; do
              CODE=\$(curl -fsS -m 5 -o /dev/null -w '%{http_code}' http://127.0.0.1:8080/actuator/health || true); \
              echo Attempt \$i - HTTP \$CODE; \
              if [ \"\$CODE\" = \"200\" ] || [ \"\$CODE\" = \"204\" ]; then
                echo 'App is healthy ✅'; exit 0; \
              fi; \
              sleep 5; \
            done; \
            echo 'Health check failed ❌ — dumping last logs'; \
            sudo journalctl -u ${SERVICE_NAME} -n 200 --no-pager || true; \
            exit 1 \
          "
