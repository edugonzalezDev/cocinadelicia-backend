name: CI + Deploy Backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ci-backend-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-test:
    name: Build & Test (Maven, Java 17)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Make mvnw executable (if present)
        run: |
          if [ -f ./mvnw ]; then chmod +x mvnw; fi

      - name: Run tests
        run: |
          if [ -f ./mvnw ]; then ./mvnw -B -ntp test; else mvn -B -ntp test; fi

      - name: Package (no skip tests)
        run: |
          if [ -f ./mvnw ]; then ./mvnw -B -ntp -DskipTests=false package; else mvn -B -ntp -DskipTests=false package; fi

      - name: Upload JAR artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: |
            **/target/*.jar
          if-no-files-found: error

  deploy:
    name: Deploy to EC2 (SSH + systemd)
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      SERVICE_NAME: ${{ secrets.EC2_SERVICE_NAME }}
      DEPLOY_DIR: ${{ secrets.DEPLOY_DIR || '/opt/cocinadelicia/backend' }}
      RELEASES_DIR: ${{ secrets.DEPLOY_DIR || '/opt/cocinadelicia/backend' }}/releases

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifact

      - name: Find JAR path
        id: jar
        run: |
          JAR_PATH=$(ls -1 artifact/**/*.jar | head -n1)
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "Will deploy: $JAR_PATH"

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Create releases dir (remote)
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "sudo mkdir -p $RELEASES_DIR && sudo chown -R app:app $(dirname $DEPLOY_DIR)"

      - name: Upload JAR (rsync)
        run: |
          RELEASE_NAME="app-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}.jar"
          rsync -avz -e "ssh -i ~/.ssh/id_rsa" "${{ steps.jar.outputs.jar_path }}" "${EC2_USER}@${EC2_HOST}:${RELEASES_DIR}/${RELEASE_NAME}"
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Promote release (symlink -> current.jar)
        id: promote
        run: |
          RELEASE_NAME=$(tail -n1 $GITHUB_OUTPUT | cut -d'=' -f2) || true
          # Si el paso anterior no exportó, lo tomo del contexto:
          if [ -z "$RELEASE_NAME" ]; then RELEASE_NAME="app-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}.jar"; fi

          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            sudo ln -sfn ${RELEASES_DIR}/${RELEASE_NAME} ${DEPLOY_DIR}/current.jar && \
            sudo chown -h app:app ${DEPLOY_DIR}/current.jar && \
            sudo ls -l ${DEPLOY_DIR}/current.jar && \
            echo promoted=${RELEASE_NAME} \
          "
          echo "promoted=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Restart service
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "\
            sudo systemctl daemon-reload && \
            sudo systemctl restart ${SERVICE_NAME} && \
            sudo systemctl is-active ${SERVICE_NAME} \
          "

      - name: Health check
        env:
          APP_HEALTH_URL: ${{ secrets.APP_HEALTH_URL }}
        run: |
          # Espera progresiva hasta 60s
          for i in {1..12}; do
            STATUS=$(curl -sS -m 5 -o /dev/null -w "%{http_code}" "$APP_HEALTH_URL" || true)
            echo "Attempt $i - HTTP $STATUS"
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "204" ]; then
              echo "App is healthy ✅"
              exit 0
            fi
            sleep 5
          done
          echo "Health check failed ❌"
          exit 1
